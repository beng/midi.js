{"name":"midi.js","tagline":"a MIDI file parser, writer, and intermediary MIDI JSON structure","body":"# midi.js\r\n\r\na library for writing MIDI files, reading MIDI files, and representing MIDI files as an intermediary JSON structure. nothing more, nothing less.\r\n\r\n## including\r\n\r\nsimply add a `script` tag to your page linking to the [midi.js](https://github.com/catshirt/midi.js/blob/master/dist/midi.js) built script. this will expose a global `MIDI` object.\r\n\r\n## using\r\n\r\n### to read files\r\n\r\nmidi.js accepts a binary string as it's input. the example below shows how to parse a midi file selected from a `file` type input.\r\n\r\n```\r\nonFileChange = (fileInput) ->\r\n  files = fileInput.files\r\n  reader = new FileReader()\r\n\r\n  reader.onload = (load_e) ->\r\n    midi = new MIDI(load_e.target.result)\r\n    console.log midi\r\n\r\n  reader.readAsBinaryString(files[0])\r\n```\r\n\r\n### to write files\r\n\r\ninstead of accepting a binary string, the MIDI constructor can also accept predefined `header` and `track` objects. additionally, any MIDI file can call `write` to return the encoded contents of the midi.\r\n\r\n```\r\nheader =\r\n  formatType: 0\r\n  trackCount: 1\r\n  ticksPerBeat: 96\r\n\r\ntrack1 = [\r\n  new MIDI.Events.TrackName(''),\r\n  new MIDI.Events.TimeSignature(4, 4, 36, 8),\r\n  new MIDI.Events.NoteOn(65, 100),\r\n  new MIDI.Events.NoteOff(65, 64, 24),\r\n  new MIDI.Events.NoteOn(70, 100, 168),\r\n  new MIDI.Events.NoteOff(70, 64, 24),\r\n  new MIDI.Events.EndOfTrack()]\r\n\r\nmidi = new MIDI(header, [track1])\r\nconsole.log(midi.write())\r\n```\r\n\r\n## compiling, developing\r\n\r\ntwo primary Gruntfile tasks are exposed for purposes of developement.\r\n\r\n`build` - will compile coffeescript files, and build the requirejs distributed packages\r\n`default` - will run build, and setup a watcher to rebuild on file changes","google":"UA-37581591-1","note":"Don't delete this file! It's used internally to help with page regeneration."}